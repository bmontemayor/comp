
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY_K BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GRAPH_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MEAN_K MEDIAN_K MINUS MODE_K NEQUAL OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON VARS MODULES STARTneural_program_id : EMPTYVARS : VARS_K BLOCKSTART VARS_DECL BLOCKENDVAR : IDVARS_DECL : TYPE VAR neural_var_dec SEMICOLON RVARS_DECL\n                | ARRAY_K TYPE VAR neural_array_dec LBRACE CONSTANT neural_constant neural_array_size RBRACE SEMICOLON RVARS_DECLneural_var_dec : EMPTYneural_array_dec : EMPTYneural_array_size : EMPTYRVARS_DECL : VARS_DECL\n                | EMPTYTYPE : INT_K\n            | FLOAT_K\n            | STRING_KCONSTANT : INT\n                | FLOAT\n                | STRINGMODULES : MODULES_RETURN\n                | MODULES_VOID\n                | EMPTYMODULES_RETURN : FUNCTION_K TYPE ID neural_modules LPAREN PARAMETERS RPAREN BLOCKSTART VARS neural_modules_size BODY BLOCKEND neural_endfunc MODULESMODULES_VOID : FUNCTION_K VOID_K ID neural_modules LPAREN PARAMETERS RPAREN BLOCKSTART VARS neural_modules_size BODY BLOCKEND neural_endfunc MODULESneural_modules : EMPTYneural_modules_size : EMPTYneural_endfunc : EMPTYPARAMETERS : TYPE VAR neural_parameters RPARAMETERS\n                | EMPTYRPARAMETERS : COMMA PARAMETERS\n                | EMPTYneural_parameters : EMPTYFUNCTION_CALL : ID neural_fc_era LPAREN EXPRESSION_LIST neural_fc_gosub RPARENneural_fc_era : EMPTYneural_fc_gosub : EMPTYSTART : MAIN_K neural_main LPAREN RPAREN BLOCKSTART BODY BLOCKENDneural_main : EMPTYBODY : STATEMENT RBODY\n            | EMPTYRBODY : BODYSTATEMENT : ASSIGN SEMICOLON\n                | RETURN\n                | READ SEMICOLON\n                | WRITE SEMICOLON\n                | IFELSE\n                | WHILE_STMT\n                | DO_WHILE \n                | FUNCTION_CALL SEMICOLON\n                | GRAPH SEMICOLONRSTATEMENT : STATEMENT RSTATEMENT\n                | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : R_ASSIGN RWRITE\n                    | CONSTANT neural_constant RWRITERWRITE : neural_write COMMA WRITE_LIST\n                | neural_write EMPTYGRAPH : GRAPH_K LPAREN VAR neural_check_array COMMA VAR neural_check_array RPAREN neural_graph_quadneural_check_array : EMPTYneural_graph_quad : EMPTYMEAN : MEAN_K LPAREN VAR neural_check_array RPAREN neural_mean_quadneural_mean_quad : EMPTYMEDIAN : MEDIAN_K LPAREN VAR neural_check_array RPAREN neural_median_quadneural_median_quad : EMPTYMODE : MODE_K LPAREN VAR neural_check_array RPAREN neural_mode_quadneural_mode_quad : EMPTYneural_write : EMPTYREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID neural_read RID_LISTneural_read : EMPTYRID_LIST : COMMA ID_LIST\n                | EMPTYASSIGN : ARRAY EQUALS neural_equals R_ASSIGN neural_assign_quad\n                | VAR neural_assign EQUALS neural_equals R_ASSIGN neural_assign_quadR_ASSIGN : EXPRESSION\n                | FUNCTION_CALL\n                | ARRAY\n                | MEAN\n                | MEDIAN\n                | MODEARRAY : VAR neural_assign LBRACE neural_array_pop EXPRESSION neural_array_ver RBRACEneural_array_pop : EMPTYneural_array_ver : EMPTYneural_assign : EMPTYneural_equals : EMPTYneural_assign_quad : EMPTYRETURN : RETURN_K LPAREN EXPRESSION RPAREN SEMICOLONIFELSE : IF_K LPAREN H_EXPRESSION RPAREN neural_ifelse BLOCKSTART RSTATEMENT BLOCKEND NELSE neural_ifelse_endneural_ifelse : EMPTYneural_ifelse_end : EMPTYNELSE : ELSE\n            | EMPTYELSE : neural_else ELSE_K BLOCKSTART RSTATEMENT BLOCKENDneural_else : EMPTYWHILE_STMT : WHILE_K neural_while_push LPAREN H_EXPRESSION RPAREN neural_while BLOCKSTART RSTATEMENT BLOCKEND neural_while_endneural_while_push : EMPTYneural_while : EMPTYneural_while_end : EMPTYDO_WHILE : DO_K neural_do_while BLOCKSTART RSTATEMENT BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN neural_do_while_end SEMICOLONneural_do_while : EMPTYneural_do_while_end : EMPTYEXPRESSION_LIST : H_EXPRESSION neural_param_exp REXPRESSION_LISTREXPRESSION_LIST : COMMA EXPRESSION_LIST\n                        | EMPTYneural_param_exp : EMPTYH_EXPRESSION : S_EXPRESSION H_REXPRESSIONH_REXPRESSION : OR neural_op H_EXPRESSION neural_hexpression\n                    | AND neural_op H_EXPRESSION\n                    | EMPTYneural_hexpression : EMPTYS_EXPRESSION : EXPRESSION S_REXPRESSIONS_REXPRESSION : GT neural_op S_EXPRESSION neural_sexpression\n                    | GTE neural_op S_EXPRESSION neural_sexpression\n                    | LT neural_op S_EXPRESSION neural_sexpression\n                    | LTE neural_op S_EXPRESSION neural_sexpression\n                    | DOUBLEEQUAL neural_op S_EXPRESSION neural_sexpression\n                    | NEQUAL neural_op S_EXPRESSION neural_sexpression\n                    | EMPTYneural_sexpression : EMPTYEXPRESSION : TERM neural_expression REXPRESSIONneural_expression : EMPTYREXPRESSION : PLUS neural_op EXPRESSION\n                    | MINUS neural_op EXPRESSION\n                    | EMPTYneural_op : EMPTYTERM : FACTOR neural_term RTERMneural_term : EMPTYRTERM : TIMES neural_op TERM\n            | DIVIDE neural_op TERM\n            | EMPTYFACTOR : ID neural_factor_id\n                | CONSTANT neural_constant\n                | LPAREN H_EXPRESSION RPARENneural_constant : EMPTYneural_factor_id : EMPTYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,15,84,],[0,-1,-34,]),'ID':([2,17,18,19,20,21,23,29,32,46,47,56,59,62,63,64,87,88,89,90,91,92,95,96,97,98,105,112,113,114,115,116,141,142,143,148,149,153,154,155,175,176,177,180,181,184,185,186,187,188,189,193,200,201,202,209,211,212,215,216,219,221,229,230,231,232,233,234,235,236,237,245,252,253,254,255,261,275,299,300,312,318,319,320,322,326,327,329,330,333,334,336,],[3,27,28,-12,-13,-14,31,-3,31,75,31,75,-40,-43,-44,-45,-39,-41,-42,-46,-47,-133,120,123,133,120,31,133,-82,-133,-133,120,120,75,120,-133,-133,133,120,-79,31,31,31,-133,-133,-133,-133,-133,-133,-133,-133,75,75,-24,75,-84,-133,-133,-133,-133,123,133,120,-122,120,120,120,120,120,120,120,31,120,120,120,120,75,120,75,120,-133,-133,-88,-89,-133,-85,-87,-92,-95,75,-96,-90,]),'SEMICOLON':([3,4,5,30,31,37,38,58,60,61,65,66,81,82,83,111,118,119,120,121,127,128,129,130,131,132,133,152,157,158,159,160,161,162,163,164,165,168,173,203,204,205,206,208,210,213,214,217,249,273,281,282,283,284,285,286,287,288,306,307,308,309,310,311,315,323,324,325,331,332,],[-133,6,-2,-133,-4,43,-7,87,88,89,90,91,-15,-16,-17,-131,-133,-133,-133,-133,-72,-73,-74,-75,-76,-77,-133,-133,209,-133,-118,-133,-124,-128,-132,-129,-65,-50,-132,248,-70,-83,-133,-130,-117,-121,-123,-127,-71,-31,-78,-119,-120,-125,-126,-133,-133,-133,-58,-59,-60,-61,-62,-63,-133,-133,-55,-57,334,-98,]),'VARS_K':([6,108,109,],[8,8,8,]),'FUNCTION_K':([7,29,278,279,303,304,305,],[13,-3,-133,-133,13,-25,13,]),'MAIN_K':([7,9,10,11,12,29,278,279,303,304,305,316,317,],[-133,16,-18,-19,-20,-3,-133,-133,-133,-25,-133,-21,-22,]),'BLOCKSTART':([8,40,74,78,79,101,102,178,227,228,238,270,271,328,],[14,46,-133,108,109,142,-97,-133,261,-86,-133,299,-94,333,]),'VOID_K':([13,],[18,]),'INT_K':([13,14,24,41,42,43,146,248,],[19,19,19,19,19,19,19,19,]),'FLOAT_K':([13,14,24,41,42,43,146,248,],[20,20,20,20,20,20,20,20,]),'STRING_K':([13,14,24,41,42,43,146,248,],[21,21,21,21,21,21,21,21,]),'ARRAY_K':([14,43,248,],[24,24,24,]),'LPAREN':([16,25,26,27,28,34,35,36,69,70,71,72,73,75,76,92,95,97,98,99,100,103,104,112,113,114,115,116,133,135,136,137,141,143,153,154,155,173,180,181,184,185,186,187,188,189,211,212,215,216,221,229,230,231,232,233,234,235,236,237,252,253,254,255,272,275,300,],[-133,33,-35,-133,-133,41,-23,42,95,96,97,98,-133,-133,105,-133,116,116,116,141,-93,143,-32,116,-82,-133,-133,116,-133,175,176,177,116,116,116,116,-79,-32,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,116,116,-122,116,116,116,116,116,116,116,116,116,116,116,300,116,116,]),'BLOCKEND':([22,29,43,46,51,52,53,55,56,57,59,62,63,64,85,86,87,88,89,90,91,142,148,149,192,193,194,200,201,202,209,240,246,247,248,261,280,289,299,312,313,318,319,320,322,326,327,329,330,333,334,335,336,],[29,-3,-133,-133,-5,-10,-11,84,-133,-37,-40,-43,-44,-45,-36,-38,-39,-41,-42,-46,-47,-133,-133,-133,239,-133,-49,-133,-24,-133,-84,-48,278,279,-133,-133,-6,312,-133,-133,322,-133,-88,-89,-133,-85,-87,-92,-95,-133,-96,336,-90,]),'RETURN_K':([29,46,56,59,62,63,64,87,88,89,90,91,142,148,149,193,200,201,202,209,261,299,312,318,319,320,322,326,327,329,330,333,334,336,],[-3,69,69,-40,-43,-44,-45,-39,-41,-42,-46,-47,69,-133,-133,69,69,-24,69,-84,69,69,-133,-133,-88,-89,-133,-85,-87,-92,-95,69,-96,-90,]),'READ_K':([29,46,56,59,62,63,64,87,88,89,90,91,142,148,149,193,200,201,202,209,261,299,312,318,319,320,322,326,327,329,330,333,334,336,],[-3,70,70,-40,-43,-44,-45,-39,-41,-42,-46,-47,70,-133,-133,70,70,-24,70,-84,70,70,-133,-133,-88,-89,-133,-85,-87,-92,-95,70,-96,-90,]),'WRITE_K':([29,46,56,59,62,63,64,87,88,89,90,91,142,148,149,193,200,201,202,209,261,299,312,318,319,320,322,326,327,329,330,333,334,336,],[-3,71,71,-40,-43,-44,-45,-39,-41,-42,-46,-47,71,-133,-133,71,71,-24,71,-84,71,71,-133,-133,-88,-89,-133,-85,-87,-92,-95,71,-96,-90,]),'IF_K':([29,46,56,59,62,63,64,87,88,89,90,91,142,148,149,193,200,201,202,209,261,299,312,318,319,320,322,326,327,329,330,333,334,336,],[-3,72,72,-40,-43,-44,-45,-39,-41,-42,-46,-47,72,-133,-133,72,72,-24,72,-84,72,72,-133,-133,-88,-89,-133,-85,-87,-92,-95,72,-96,-90,]),'WHILE_K':([29,46,56,59,62,63,64,87,88,89,90,91,142,148,149,193,200,201,202,209,239,261,299,312,318,319,320,322,326,327,329,330,333,334,336,],[-3,73,73,-40,-43,-44,-45,-39,-41,-42,-46,-47,73,-133,-133,73,73,-24,73,-84,272,73,73,-133,-133,-88,-89,-133,-85,-87,-92,-95,73,-96,-90,]),'DO_K':([29,46,56,59,62,63,64,87,88,89,90,91,142,148,149,193,200,201,202,209,261,299,312,318,319,320,322,326,327,329,330,333,334,336,],[-3,74,74,-40,-43,-44,-45,-39,-41,-42,-46,-47,74,-133,-133,74,74,-24,74,-84,74,74,-133,-133,-88,-89,-133,-85,-87,-92,-95,74,-96,-90,]),'GRAPH_K':([29,46,56,59,62,63,64,87,88,89,90,91,142,148,149,193,200,201,202,209,261,299,312,318,319,320,322,326,327,329,330,333,334,336,],[-3,76,76,-40,-43,-44,-45,-39,-41,-42,-46,-47,76,-133,-133,76,76,-24,76,-84,76,76,-133,-133,-88,-89,-133,-85,-87,-92,-95,76,-96,-90,]),'LBRACE':([31,39,44,45,68,75,93,94,133,134,174,],[-4,-133,54,-8,-133,-4,115,-81,-4,-133,115,]),'COMMA':([31,77,81,82,83,106,107,111,118,119,120,121,123,125,126,127,128,129,130,131,132,133,139,140,144,158,159,160,161,162,163,164,166,167,170,171,172,173,179,182,183,190,196,197,198,208,210,213,214,217,243,244,262,263,264,265,266,267,268,269,273,281,282,283,284,285,286,287,288,290,291,292,293,294,295,296,297,298,306,307,308,309,310,311,],[-4,-133,-15,-16,-17,146,-30,-131,-133,-133,-133,-133,-133,-133,-133,-72,-73,-74,-75,-76,-77,-133,-133,-133,-133,-133,-118,-133,-124,-128,-132,-129,219,-67,221,-64,-129,-132,-103,-106,-108,-115,-133,245,-56,-130,-117,-121,-123,-127,275,-102,-133,-105,-133,-133,-133,-133,-133,-133,-31,-78,-119,-120,-125,-126,-133,-133,-133,-104,-107,-109,-116,-110,-111,-112,-113,-114,-58,-59,-60,-61,-62,-63,]),'RPAREN':([31,33,41,42,48,49,50,77,81,82,83,106,107,111,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,138,139,140,145,146,147,156,158,159,160,161,162,163,164,166,167,169,170,171,172,173,179,182,183,190,191,195,196,198,199,208,210,213,214,217,218,220,222,223,224,225,226,241,242,243,244,256,257,258,259,260,262,263,264,265,266,267,268,269,273,274,276,277,281,282,283,284,285,286,287,288,290,291,292,293,294,295,296,297,298,301,302,306,307,308,309,310,311,314,],[-4,40,-133,-133,78,-27,79,-133,-15,-16,-17,-133,-30,-131,157,-133,-133,-133,-133,165,-133,168,-133,-133,-72,-73,-74,-75,-76,-77,-133,178,-133,-133,-26,-133,-29,208,-133,-118,-133,-124,-128,-132,-129,-133,-67,-51,-133,-64,-129,-132,-103,-106,-108,-115,238,-133,-133,-56,-28,-130,-117,-121,-123,-127,-66,-69,-54,-52,-133,-133,-133,273,-33,-133,-102,-68,-53,286,287,288,-133,-105,-133,-133,-133,-133,-133,-133,-31,-99,-101,-133,-78,-119,-120,-125,-126,-133,-133,-133,-104,-107,-109,-116,-110,-111,-112,-113,-114,-100,315,-58,-59,-60,-61,-62,-63,323,]),'INT':([54,92,95,97,98,112,113,114,115,116,141,143,153,154,155,180,181,184,185,186,187,188,189,211,212,215,216,221,229,230,231,232,233,234,235,236,237,252,253,254,255,275,300,],[81,-133,81,81,81,81,-82,-133,-133,81,81,81,81,81,-79,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,81,81,-122,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'FLOAT':([54,92,95,97,98,112,113,114,115,116,141,143,153,154,155,180,181,184,185,186,187,188,189,211,212,215,216,221,229,230,231,232,233,234,235,236,237,252,253,254,255,275,300,],[82,-133,82,82,82,82,-82,-133,-133,82,82,82,82,82,-79,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,82,82,-122,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'STRING':([54,92,95,97,98,112,113,114,115,116,141,143,153,154,155,180,181,184,185,186,187,188,189,211,212,215,216,221,229,230,231,232,233,234,235,236,237,252,253,254,255,275,300,],[83,-133,83,83,83,83,-82,-133,-133,83,83,83,83,83,-79,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,83,83,-122,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'EQUALS':([67,68,75,93,94,281,],[92,-133,-4,114,-81,-78,]),'RBRACE':([80,81,82,83,110,111,118,119,120,121,150,151,158,159,160,161,162,163,164,207,208,210,213,214,217,250,251,282,283,284,285,],[-133,-15,-16,-17,-133,-131,-133,-133,-133,-133,203,-9,-133,-118,-133,-124,-128,-132,-129,-133,-130,-117,-121,-123,-127,281,-80,-119,-120,-125,-126,]),'TIMES':([81,82,83,111,119,120,121,126,133,160,161,162,163,164,172,173,208,],[-15,-16,-17,-131,-133,-133,-133,-133,-133,215,-124,-128,-132,-129,-129,-132,-130,]),'DIVIDE':([81,82,83,111,119,120,121,126,133,160,161,162,163,164,172,173,208,],[-15,-16,-17,-131,-133,-133,-133,-133,-133,216,-124,-128,-132,-129,-129,-132,-130,]),'PLUS':([81,82,83,111,118,119,120,121,126,133,158,159,160,161,162,163,164,172,173,208,214,217,284,285,],[-15,-16,-17,-131,-133,-133,-133,-133,-133,-133,211,-118,-133,-124,-128,-132,-129,-129,-132,-130,-123,-127,-125,-126,]),'MINUS':([81,82,83,111,118,119,120,121,126,133,158,159,160,161,162,163,164,172,173,208,214,217,284,285,],[-15,-16,-17,-131,-133,-133,-133,-133,-133,-133,212,-118,-133,-124,-128,-132,-129,-129,-132,-130,-123,-127,-125,-126,]),'GT':([81,82,83,111,118,119,120,121,140,158,159,160,161,162,163,164,208,210,213,214,217,282,283,284,285,],[-15,-16,-17,-131,-133,-133,-133,-133,184,-133,-118,-133,-124,-128,-132,-129,-130,-117,-121,-123,-127,-119,-120,-125,-126,]),'GTE':([81,82,83,111,118,119,120,121,140,158,159,160,161,162,163,164,208,210,213,214,217,282,283,284,285,],[-15,-16,-17,-131,-133,-133,-133,-133,185,-133,-118,-133,-124,-128,-132,-129,-130,-117,-121,-123,-127,-119,-120,-125,-126,]),'LT':([81,82,83,111,118,119,120,121,140,158,159,160,161,162,163,164,208,210,213,214,217,282,283,284,285,],[-15,-16,-17,-131,-133,-133,-133,-133,186,-133,-118,-133,-124,-128,-132,-129,-130,-117,-121,-123,-127,-119,-120,-125,-126,]),'LTE':([81,82,83,111,118,119,120,121,140,158,159,160,161,162,163,164,208,210,213,214,217,282,283,284,285,],[-15,-16,-17,-131,-133,-133,-133,-133,187,-133,-118,-133,-124,-128,-132,-129,-130,-117,-121,-123,-127,-119,-120,-125,-126,]),'DOUBLEEQUAL':([81,82,83,111,118,119,120,121,140,158,159,160,161,162,163,164,208,210,213,214,217,282,283,284,285,],[-15,-16,-17,-131,-133,-133,-133,-133,188,-133,-118,-133,-124,-128,-132,-129,-130,-117,-121,-123,-127,-119,-120,-125,-126,]),'NEQUAL':([81,82,83,111,118,119,120,121,140,158,159,160,161,162,163,164,208,210,213,214,217,282,283,284,285,],[-15,-16,-17,-131,-133,-133,-133,-133,189,-133,-118,-133,-124,-128,-132,-129,-130,-117,-121,-123,-127,-119,-120,-125,-126,]),'OR':([81,82,83,111,118,119,120,121,139,140,158,159,160,161,162,163,164,183,190,208,210,213,214,217,264,265,266,267,268,269,282,283,284,285,292,293,294,295,296,297,298,],[-15,-16,-17,-131,-133,-133,-133,-133,180,-133,-133,-118,-133,-124,-128,-132,-129,-108,-115,-130,-117,-121,-123,-127,-133,-133,-133,-133,-133,-133,-119,-120,-125,-126,-109,-116,-110,-111,-112,-113,-114,]),'AND':([81,82,83,111,118,119,120,121,139,140,158,159,160,161,162,163,164,183,190,208,210,213,214,217,264,265,266,267,268,269,282,283,284,285,292,293,294,295,296,297,298,],[-15,-16,-17,-131,-133,-133,-133,-133,181,-133,-133,-118,-133,-124,-128,-132,-129,-108,-115,-130,-117,-121,-123,-127,-133,-133,-133,-133,-133,-133,-119,-120,-125,-126,-109,-116,-110,-111,-112,-113,-114,]),'MEAN_K':([92,97,112,113,114,153,221,],[-133,135,135,-82,-133,135,135,]),'MEDIAN_K':([92,97,112,113,114,153,221,],[-133,136,136,-82,-133,136,136,]),'MODE_K':([92,97,112,113,114,153,221,],[-133,137,137,-82,-133,137,137,]),'ELSE_K':([312,320,321,],[-133,-91,328,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,7,16,27,28,30,39,41,42,43,46,56,68,73,74,75,77,80,92,106,110,114,115,118,119,120,121,123,125,126,133,134,139,140,142,144,146,148,149,152,158,160,166,170,172,178,180,181,184,185,186,187,188,189,193,195,196,200,202,206,207,211,212,215,216,224,225,226,238,243,248,261,262,264,265,266,267,268,269,277,278,279,286,287,288,299,303,305,312,315,318,322,323,333,],[5,12,26,35,35,38,45,49,49,53,57,57,94,100,102,104,107,111,113,147,151,113,155,159,161,163,111,167,171,111,173,94,182,190,194,198,49,201,201,205,213,217,220,222,171,228,230,230,230,230,230,230,230,230,194,242,244,57,57,205,251,230,230,230,230,198,198,198,271,276,53,194,291,293,293,293,293,293,293,198,304,304,307,309,311,194,12,12,320,325,327,330,332,194,]),'VARS':([6,108,109,],[7,148,149,]),'MODULES':([7,303,305,],[9,316,317,]),'MODULES_RETURN':([7,303,305,],[10,10,10,]),'MODULES_VOID':([7,303,305,],[11,11,11,]),'START':([9,],[15,]),'TYPE':([13,14,24,41,42,43,146,248,],[17,23,32,47,47,23,47,23,]),'VARS_DECL':([14,43,248,],[22,52,52,]),'neural_main':([16,],[25,]),'VAR':([23,32,46,47,56,97,105,112,142,153,175,176,177,193,200,202,221,245,261,299,333,],[30,39,68,77,68,134,144,134,68,134,224,225,226,68,68,68,134,277,68,68,68,]),'neural_modules':([27,28,],[34,36,]),'neural_var_dec':([30,],[37,]),'neural_array_dec':([39,],[44,]),'PARAMETERS':([41,42,146,],[48,50,199,]),'RVARS_DECL':([43,248,],[51,280,]),'BODY':([46,56,200,202,],[55,86,246,247,]),'STATEMENT':([46,56,142,193,200,202,261,299,333,],[56,56,193,193,56,56,193,193,193,]),'ASSIGN':([46,56,142,193,200,202,261,299,333,],[58,58,58,58,58,58,58,58,58,]),'RETURN':([46,56,142,193,200,202,261,299,333,],[59,59,59,59,59,59,59,59,59,]),'READ':([46,56,142,193,200,202,261,299,333,],[60,60,60,60,60,60,60,60,60,]),'WRITE':([46,56,142,193,200,202,261,299,333,],[61,61,61,61,61,61,61,61,61,]),'IFELSE':([46,56,142,193,200,202,261,299,333,],[62,62,62,62,62,62,62,62,62,]),'WHILE_STMT':([46,56,142,193,200,202,261,299,333,],[63,63,63,63,63,63,63,63,63,]),'DO_WHILE':([46,56,142,193,200,202,261,299,333,],[64,64,64,64,64,64,64,64,64,]),'FUNCTION_CALL':([46,56,97,112,142,153,193,200,202,221,261,299,333,],[65,65,128,128,65,128,65,65,65,128,65,65,65,]),'GRAPH':([46,56,142,193,200,202,261,299,333,],[66,66,66,66,66,66,66,66,66,]),'ARRAY':([46,56,97,112,142,153,193,200,202,221,261,299,333,],[67,67,129,129,67,129,67,67,67,129,67,67,67,]),'CONSTANT':([54,95,97,98,112,116,141,143,153,154,221,229,231,232,233,234,235,236,237,252,253,254,255,275,300,],[80,121,126,121,121,121,121,121,121,121,126,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'RBODY':([56,],[85,]),'neural_assign':([68,134,],[93,174,]),'neural_while_push':([73,],[99,]),'neural_do_while':([74,],[101,]),'neural_fc_era':([75,133,],[103,103,]),'neural_parameters':([77,],[106,]),'neural_constant':([80,121,126,],[110,164,172,]),'neural_equals':([92,114,],[112,153,]),'EXPRESSION':([95,97,98,112,116,141,143,153,154,221,229,231,232,233,234,235,236,237,252,253,275,300,],[117,127,140,127,140,140,140,127,207,127,140,140,140,140,140,140,140,140,282,283,140,140,]),'TERM':([95,97,98,112,116,141,143,153,154,221,229,231,232,233,234,235,236,237,252,253,254,255,275,300,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,284,285,118,118,]),'FACTOR':([95,97,98,112,116,141,143,153,154,221,229,231,232,233,234,235,236,237,252,253,254,255,275,300,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'ID_LIST':([96,219,],[122,256,]),'WRITE_LIST':([97,221,],[124,257,]),'R_ASSIGN':([97,112,153,221,],[125,152,206,125,]),'MEAN':([97,112,153,221,],[130,130,130,130,]),'MEDIAN':([97,112,153,221,],[131,131,131,131,]),'MODE':([97,112,153,221,],[132,132,132,132,]),'H_EXPRESSION':([98,116,141,143,229,231,275,300,],[138,156,191,196,262,263,196,314,]),'S_EXPRESSION':([98,116,141,143,229,231,232,233,234,235,236,237,275,300,],[139,139,139,139,139,139,264,265,266,267,268,269,139,139,]),'RPARAMETERS':([106,],[145,]),'neural_array_size':([110,],[150,]),'neural_array_pop':([115,],[154,]),'neural_expression':([118,],[158,]),'neural_term':([119,],[160,]),'neural_factor_id':([120,133,],[162,162,]),'neural_read':([123,],[166,]),'RWRITE':([125,172,],[169,223,]),'neural_write':([125,172,],[170,170,]),'H_REXPRESSION':([139,],[179,]),'S_REXPRESSION':([140,],[183,]),'RSTATEMENT':([142,193,261,299,333,],[192,240,289,313,335,]),'EXPRESSION_LIST':([143,275,],[195,301,]),'neural_check_array':([144,224,225,226,277,],[197,258,259,260,302,]),'neural_modules_size':([148,149,],[200,202,]),'neural_assign_quad':([152,206,],[204,249,]),'REXPRESSION':([158,],[210,]),'RTERM':([160,],[214,]),'RID_LIST':([166,],[218,]),'neural_ifelse':([178,],[227,]),'neural_op':([180,181,184,185,186,187,188,189,211,212,215,216,],[229,231,232,233,234,235,236,237,252,253,254,255,]),'neural_fc_gosub':([195,],[241,]),'neural_param_exp':([196,],[243,]),'neural_array_ver':([207,],[250,]),'neural_while':([238,],[270,]),'REXPRESSION_LIST':([243,],[274,]),'neural_hexpression':([262,],[290,]),'neural_sexpression':([264,265,266,267,268,269,],[292,294,295,296,297,298,]),'neural_endfunc':([278,279,],[303,305,]),'neural_mean_quad':([286,],[306,]),'neural_median_quad':([287,],[308,]),'neural_mode_quad':([288,],[310,]),'NELSE':([312,],[318,]),'ELSE':([312,],[319,]),'neural_else':([312,],[321,]),'neural_graph_quad':([315,],[324,]),'neural_ifelse_end':([318,],[326,]),'neural_while_end':([322,],[329,]),'neural_do_while_end':([323,],[331,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON VARS MODULES START','PROGRAM',7,'p_program','n.py',197),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','n.py',202),
  ('VARS -> VARS_K BLOCKSTART VARS_DECL BLOCKEND','VARS',4,'p_vars','n.py',214),
  ('VAR -> ID','VAR',1,'p_var','n.py',218),
  ('VARS_DECL -> TYPE VAR neural_var_dec SEMICOLON RVARS_DECL','VARS_DECL',5,'p_vars_decl','n.py',224),
  ('VARS_DECL -> ARRAY_K TYPE VAR neural_array_dec LBRACE CONSTANT neural_constant neural_array_size RBRACE SEMICOLON RVARS_DECL','VARS_DECL',11,'p_vars_decl','n.py',225),
  ('neural_var_dec -> EMPTY','neural_var_dec',1,'p_neural_var_dec','n.py',229),
  ('neural_array_dec -> EMPTY','neural_array_dec',1,'p_neural_array_dec','n.py',245),
  ('neural_array_size -> EMPTY','neural_array_size',1,'p_neural_array_size','n.py',262),
  ('RVARS_DECL -> VARS_DECL','RVARS_DECL',1,'p_rvars_decl','n.py',280),
  ('RVARS_DECL -> EMPTY','RVARS_DECL',1,'p_rvars_decl','n.py',281),
  ('TYPE -> INT_K','TYPE',1,'p_type','n.py',288),
  ('TYPE -> FLOAT_K','TYPE',1,'p_type','n.py',289),
  ('TYPE -> STRING_K','TYPE',1,'p_type','n.py',290),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','n.py',298),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','n.py',299),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','n.py',300),
  ('MODULES -> MODULES_RETURN','MODULES',1,'p_modules','n.py',309),
  ('MODULES -> MODULES_VOID','MODULES',1,'p_modules','n.py',310),
  ('MODULES -> EMPTY','MODULES',1,'p_modules','n.py',311),
  ('MODULES_RETURN -> FUNCTION_K TYPE ID neural_modules LPAREN PARAMETERS RPAREN BLOCKSTART VARS neural_modules_size BODY BLOCKEND neural_endfunc MODULES','MODULES_RETURN',14,'p_modules_return','n.py',314),
  ('MODULES_VOID -> FUNCTION_K VOID_K ID neural_modules LPAREN PARAMETERS RPAREN BLOCKSTART VARS neural_modules_size BODY BLOCKEND neural_endfunc MODULES','MODULES_VOID',14,'p_modules_void','n.py',319),
  ('neural_modules -> EMPTY','neural_modules',1,'p_neural_modules','n.py',323),
  ('neural_modules_size -> EMPTY','neural_modules_size',1,'p_neural_modules_size','n.py',341),
  ('neural_endfunc -> EMPTY','neural_endfunc',1,'p_neural_endfunc','n.py',348),
  ('PARAMETERS -> TYPE VAR neural_parameters RPARAMETERS','PARAMETERS',4,'p_parameters','n.py',356),
  ('PARAMETERS -> EMPTY','PARAMETERS',1,'p_parameters','n.py',357),
  ('RPARAMETERS -> COMMA PARAMETERS','RPARAMETERS',2,'p_rparameters','n.py',360),
  ('RPARAMETERS -> EMPTY','RPARAMETERS',1,'p_rparameters','n.py',361),
  ('neural_parameters -> EMPTY','neural_parameters',1,'p_neural_parameters','n.py',365),
  ('FUNCTION_CALL -> ID neural_fc_era LPAREN EXPRESSION_LIST neural_fc_gosub RPAREN','FUNCTION_CALL',6,'p_function_call','n.py',380),
  ('neural_fc_era -> EMPTY','neural_fc_era',1,'p_neural_fc_era','n.py',384),
  ('neural_fc_gosub -> EMPTY','neural_fc_gosub',1,'p_neural_fc_gosub','n.py',397),
  ('START -> MAIN_K neural_main LPAREN RPAREN BLOCKSTART BODY BLOCKEND','START',7,'p_start','n.py',421),
  ('neural_main -> EMPTY','neural_main',1,'p_neural_main','n.py',424),
  ('BODY -> STATEMENT RBODY','BODY',2,'p_body','n.py',429),
  ('BODY -> EMPTY','BODY',1,'p_body','n.py',430),
  ('RBODY -> BODY','RBODY',1,'p_rbody','n.py',433),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','n.py',436),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_statement','n.py',437),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','n.py',438),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','n.py',439),
  ('STATEMENT -> IFELSE','STATEMENT',1,'p_statement','n.py',440),
  ('STATEMENT -> WHILE_STMT','STATEMENT',1,'p_statement','n.py',441),
  ('STATEMENT -> DO_WHILE','STATEMENT',1,'p_statement','n.py',442),
  ('STATEMENT -> FUNCTION_CALL SEMICOLON','STATEMENT',2,'p_statement','n.py',443),
  ('STATEMENT -> GRAPH SEMICOLON','STATEMENT',2,'p_statement','n.py',444),
  ('RSTATEMENT -> STATEMENT RSTATEMENT','RSTATEMENT',2,'p_rstatement','n.py',447),
  ('RSTATEMENT -> EMPTY','RSTATEMENT',1,'p_rstatement','n.py',448),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','n.py',451),
  ('WRITE_LIST -> R_ASSIGN RWRITE','WRITE_LIST',2,'p_write_list','n.py',454),
  ('WRITE_LIST -> CONSTANT neural_constant RWRITE','WRITE_LIST',3,'p_write_list','n.py',455),
  ('RWRITE -> neural_write COMMA WRITE_LIST','RWRITE',3,'p_rwrite','n.py',458),
  ('RWRITE -> neural_write EMPTY','RWRITE',2,'p_rwrite','n.py',459),
  ('GRAPH -> GRAPH_K LPAREN VAR neural_check_array COMMA VAR neural_check_array RPAREN neural_graph_quad','GRAPH',9,'p_graph','n.py',462),
  ('neural_check_array -> EMPTY','neural_check_array',1,'p_neural_check_array','n.py',466),
  ('neural_graph_quad -> EMPTY','neural_graph_quad',1,'p_neural_graph_quad','n.py',495),
  ('MEAN -> MEAN_K LPAREN VAR neural_check_array RPAREN neural_mean_quad','MEAN',6,'p_mean','n.py',510),
  ('neural_mean_quad -> EMPTY','neural_mean_quad',1,'p_neural_mean_quad','n.py',513),
  ('MEDIAN -> MEDIAN_K LPAREN VAR neural_check_array RPAREN neural_median_quad','MEDIAN',6,'p_median','n.py',523),
  ('neural_median_quad -> EMPTY','neural_median_quad',1,'p_neural_median_quad','n.py',526),
  ('MODE -> MODE_K LPAREN VAR neural_check_array RPAREN neural_mode_quad','MODE',6,'p_mode','n.py',536),
  ('neural_mode_quad -> EMPTY','neural_mode_quad',1,'p_neural_mode_quad','n.py',539),
  ('neural_write -> EMPTY','neural_write',1,'p_neural_write','n.py',551),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','n.py',559),
  ('ID_LIST -> ID neural_read RID_LIST','ID_LIST',3,'p_id_list','n.py',562),
  ('neural_read -> EMPTY','neural_read',1,'p_neural_read','n.py',566),
  ('RID_LIST -> COMMA ID_LIST','RID_LIST',2,'p_rid_list','n.py',570),
  ('RID_LIST -> EMPTY','RID_LIST',1,'p_rid_list','n.py',571),
  ('ASSIGN -> ARRAY EQUALS neural_equals R_ASSIGN neural_assign_quad','ASSIGN',5,'p_assign','n.py',575),
  ('ASSIGN -> VAR neural_assign EQUALS neural_equals R_ASSIGN neural_assign_quad','ASSIGN',6,'p_assign','n.py',576),
  ('R_ASSIGN -> EXPRESSION','R_ASSIGN',1,'p_r_assign','n.py',579),
  ('R_ASSIGN -> FUNCTION_CALL','R_ASSIGN',1,'p_r_assign','n.py',580),
  ('R_ASSIGN -> ARRAY','R_ASSIGN',1,'p_r_assign','n.py',581),
  ('R_ASSIGN -> MEAN','R_ASSIGN',1,'p_r_assign','n.py',582),
  ('R_ASSIGN -> MEDIAN','R_ASSIGN',1,'p_r_assign','n.py',583),
  ('R_ASSIGN -> MODE','R_ASSIGN',1,'p_r_assign','n.py',584),
  ('ARRAY -> VAR neural_assign LBRACE neural_array_pop EXPRESSION neural_array_ver RBRACE','ARRAY',7,'p_array','n.py',587),
  ('neural_array_pop -> EMPTY','neural_array_pop',1,'p_neural_array_pop','n.py',590),
  ('neural_array_ver -> EMPTY','neural_array_ver',1,'p_neural_array_ver','n.py',598),
  ('neural_assign -> EMPTY','neural_assign',1,'p_neural_assign','n.py',621),
  ('neural_equals -> EMPTY','neural_equals',1,'p_neural_equals','n.py',640),
  ('neural_assign_quad -> EMPTY','neural_assign_quad',1,'p_neural_assign_quad','n.py',645),
  ('RETURN -> RETURN_K LPAREN EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','n.py',661),
  ('IFELSE -> IF_K LPAREN H_EXPRESSION RPAREN neural_ifelse BLOCKSTART RSTATEMENT BLOCKEND NELSE neural_ifelse_end','IFELSE',10,'p_ifelse','n.py',667),
  ('neural_ifelse -> EMPTY','neural_ifelse',1,'p_neural_ifelse','n.py',671),
  ('neural_ifelse_end -> EMPTY','neural_ifelse_end',1,'p_neural_ifelse_end','n.py',683),
  ('NELSE -> ELSE','NELSE',1,'p_nelse','n.py',688),
  ('NELSE -> EMPTY','NELSE',1,'p_nelse','n.py',689),
  ('ELSE -> neural_else ELSE_K BLOCKSTART RSTATEMENT BLOCKEND','ELSE',5,'p_else','n.py',692),
  ('neural_else -> EMPTY','neural_else',1,'p_neural_else','n.py',696),
  ('WHILE_STMT -> WHILE_K neural_while_push LPAREN H_EXPRESSION RPAREN neural_while BLOCKSTART RSTATEMENT BLOCKEND neural_while_end','WHILE_STMT',10,'p_while_stmt','n.py',706),
  ('neural_while_push -> EMPTY','neural_while_push',1,'p_neural_while_push','n.py',710),
  ('neural_while -> EMPTY','neural_while',1,'p_neural_while','n.py',715),
  ('neural_while_end -> EMPTY','neural_while_end',1,'p_neural_while_end','n.py',727),
  ('DO_WHILE -> DO_K neural_do_while BLOCKSTART RSTATEMENT BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN neural_do_while_end SEMICOLON','DO_WHILE',11,'p_do_while','n.py',737),
  ('neural_do_while -> EMPTY','neural_do_while',1,'p_neural_do_while','n.py',741),
  ('neural_do_while_end -> EMPTY','neural_do_while_end',1,'p_neural_do_while_end','n.py',746),
  ('EXPRESSION_LIST -> H_EXPRESSION neural_param_exp REXPRESSION_LIST','EXPRESSION_LIST',3,'p_expression_list','n.py',760),
  ('REXPRESSION_LIST -> COMMA EXPRESSION_LIST','REXPRESSION_LIST',2,'p_rexpression_list','n.py',763),
  ('REXPRESSION_LIST -> EMPTY','REXPRESSION_LIST',1,'p_rexpression_list','n.py',764),
  ('neural_param_exp -> EMPTY','neural_param_exp',1,'p_neural_param_exp','n.py',769),
  ('H_EXPRESSION -> S_EXPRESSION H_REXPRESSION','H_EXPRESSION',2,'p_h_expression','n.py',787),
  ('H_REXPRESSION -> OR neural_op H_EXPRESSION neural_hexpression','H_REXPRESSION',4,'p_h_rexpression','n.py',790),
  ('H_REXPRESSION -> AND neural_op H_EXPRESSION','H_REXPRESSION',3,'p_h_rexpression','n.py',791),
  ('H_REXPRESSION -> EMPTY','H_REXPRESSION',1,'p_h_rexpression','n.py',792),
  ('neural_hexpression -> EMPTY','neural_hexpression',1,'p_neural_hexpression','n.py',795),
  ('S_EXPRESSION -> EXPRESSION S_REXPRESSION','S_EXPRESSION',2,'p_s_expression','n.py',820),
  ('S_REXPRESSION -> GT neural_op S_EXPRESSION neural_sexpression','S_REXPRESSION',4,'p_s_rexpression','n.py',823),
  ('S_REXPRESSION -> GTE neural_op S_EXPRESSION neural_sexpression','S_REXPRESSION',4,'p_s_rexpression','n.py',824),
  ('S_REXPRESSION -> LT neural_op S_EXPRESSION neural_sexpression','S_REXPRESSION',4,'p_s_rexpression','n.py',825),
  ('S_REXPRESSION -> LTE neural_op S_EXPRESSION neural_sexpression','S_REXPRESSION',4,'p_s_rexpression','n.py',826),
  ('S_REXPRESSION -> DOUBLEEQUAL neural_op S_EXPRESSION neural_sexpression','S_REXPRESSION',4,'p_s_rexpression','n.py',827),
  ('S_REXPRESSION -> NEQUAL neural_op S_EXPRESSION neural_sexpression','S_REXPRESSION',4,'p_s_rexpression','n.py',828),
  ('S_REXPRESSION -> EMPTY','S_REXPRESSION',1,'p_s_rexpression','n.py',829),
  ('neural_sexpression -> EMPTY','neural_sexpression',1,'p_neural_sexpression','n.py',832),
  ('EXPRESSION -> TERM neural_expression REXPRESSION','EXPRESSION',3,'p_expression','n.py',858),
  ('neural_expression -> EMPTY','neural_expression',1,'p_neural_expression','n.py',862),
  ('REXPRESSION -> PLUS neural_op EXPRESSION','REXPRESSION',3,'p_rexpression','n.py',888),
  ('REXPRESSION -> MINUS neural_op EXPRESSION','REXPRESSION',3,'p_rexpression','n.py',889),
  ('REXPRESSION -> EMPTY','REXPRESSION',1,'p_rexpression','n.py',890),
  ('neural_op -> EMPTY','neural_op',1,'p_neural_op','n.py',894),
  ('TERM -> FACTOR neural_term RTERM','TERM',3,'p_term','n.py',899),
  ('neural_term -> EMPTY','neural_term',1,'p_neural_term','n.py',903),
  ('RTERM -> TIMES neural_op TERM','RTERM',3,'p_rterm','n.py',929),
  ('RTERM -> DIVIDE neural_op TERM','RTERM',3,'p_rterm','n.py',930),
  ('RTERM -> EMPTY','RTERM',1,'p_rterm','n.py',931),
  ('FACTOR -> ID neural_factor_id','FACTOR',2,'p_factor','n.py',936),
  ('FACTOR -> CONSTANT neural_constant','FACTOR',2,'p_factor','n.py',937),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor','n.py',938),
  ('neural_constant -> EMPTY','neural_constant',1,'p_neural_constant','n.py',942),
  ('neural_factor_id -> EMPTY','neural_factor_id',1,'p_neural_factor_id','n.py',967),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','n.py',990),
]
